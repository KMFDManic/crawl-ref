// This file has been automatically generated.

#include "AppHdr.h"
#include "tiledef-icons.h"

static unsigned int _tile_icons_count[TILEI_ICONS_MAX - 0] =
{
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
};

unsigned int tile_icons_count(tileidx_t idx)
{
    ASSERT_RANGE(idx, 0, TILEI_ICONS_MAX);
    return _tile_icons_count[idx - 0];
}

static tileidx_t _tile_icons_basetiles[TILEI_ICONS_MAX - 0] =
{
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    79,
    79,
    79,
    79,
    79,
    79,
    79,
    87,
    87,
    87,
    87,
    87,
    87,
    87,
    87,
};

tileidx_t tile_icons_basetile(tileidx_t idx)
{
    ASSERT_RANGE(idx, 0, TILEI_ICONS_MAX);
    return _tile_icons_basetiles[idx - 0] + 0;
}

static int _tile_icons_probs[TILEI_ICONS_MAX - 0] =
{
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
};

int tile_icons_probs(tileidx_t idx)
{
    ASSERT_RANGE(idx, 0, TILEI_ICONS_MAX);
    return _tile_icons_probs[idx - 0];
}

static const char *_tile_icons_name[TILEI_ICONS_MAX - 0] =
{
    "ICONS_FILLER_0",
    "TRAP_NET",
    "MASK_DEEP_WATER",
    "MASK_SHALLOW_WATER",
    "MASK_DEEP_WATER_MURKY",
    "MASK_SHALLOW_WATER_MURKY",
    "MASK_DEEP_WATER_SHOALS",
    "MASK_SHALLOW_WATER_SHOALS",
    "MASK_LAVA",
    "CURSOR",
    "CURSOR2",
    "CURSOR3",
    "TUTORIAL_CURSOR",
    "TRAP_WEB",
    "HEART",
    "GOOD_NEUTRAL",
    "NEUTRAL",
    "ANIMATED_WEAPON",
    "SUMMONED",
    "PERM_SUMMON",
    "POISON",
    "STICKY_FLAME",
    "INNER_FLAME",
    "CONSTRICTED",
    "BERSERK",
    "GLOWING",
    "SLOWED",
    "HASTED",
    "MIGHT",
    "PETRIFYING",
    "PETRIFIED",
    "BLIND",
    "FLEEING",
    "MAY_STAB_BRAND",
    "STAB_BRAND",
    "PAIN_MIRROR",
    "DEATHS_DOOR",
    "RECALL",
    "DRAIN",
    "SOMETHING_UNDER",
    "TRIED",
    "NEW_STAIR",
    "MESH",
    "OOR_MESH",
    "MAGIC_MAP_MESH",
    "TRAVEL_EXCLUSION_FG",
    "TRAVEL_EXCLUSION_CENTRE_FG",
    "NUM0",
    "NUM1",
    "NUM2",
    "NUM3",
    "NUM4",
    "NUM5",
    "NUM6",
    "NUM7",
    "NUM8",
    "NUM9",
    "NUM_MINUS5",
    "NUM_MINUS4",
    "NUM_MINUS3",
    "NUM_MINUS2",
    "NUM_MINUS1",
    "NUM_ZERO",
    "NUM_PLUS1",
    "NUM_PLUS2",
    "NUM_PLUS3",
    "NUM_PLUS4",
    "NUM_PLUS5",
    "DEMON_NUM1",
    "DEMON_NUM2",
    "DEMON_NUM3",
    "DEMON_NUM4",
    "DEMON_NUM5",
    "ITEM_SLOT_SELECTED",
    "MDAM_LIGHTLY_DAMAGED",
    "MDAM_MODERATELY_DAMAGED",
    "MDAM_HEAVILY_DAMAGED",
    "MDAM_SEVERELY_DAMAGED",
    "MDAM_ALMOST_DEAD",
    "TRAVEL_PATH_FROM",
    "TRAVEL_PATH_FROM_1",
    "TRAVEL_PATH_FROM_2",
    "TRAVEL_PATH_FROM_3",
    "TRAVEL_PATH_FROM_4",
    "TRAVEL_PATH_FROM_5",
    "TRAVEL_PATH_FROM_6",
    "TRAVEL_PATH_FROM_7",
    "TRAVEL_PATH_TO",
    "TRAVEL_PATH_TO_1",
    "TRAVEL_PATH_TO_2",
    "TRAVEL_PATH_TO_3",
    "TRAVEL_PATH_TO_4",
    "TRAVEL_PATH_TO_5",
    "TRAVEL_PATH_TO_6",
    "TRAVEL_PATH_TO_7",
};

const char *tile_icons_name(tileidx_t idx)
{
    ASSERT_RANGE(idx, 0, TILEI_ICONS_MAX);
    return _tile_icons_name[idx - 0];
}

static tile_info _tile_icons_info[TILEI_ICONS_MAX - 0] =
{
    tile_info(32, 32, 0, 0, 0, 0, 32, 32),
    tile_info(32, 32, 1, 1, 32, 0, 62, 30),
    tile_info(32, 32, 0, 16, 62, 0, 94, 16),
    tile_info(32, 32, 0, 16, 94, 0, 126, 16),
    tile_info(32, 32, 0, 16, 126, 0, 158, 16),
    tile_info(32, 32, 0, 16, 158, 0, 190, 16),
    tile_info(32, 32, 0, 16, 190, 0, 222, 16),
    tile_info(32, 32, 0, 16, 222, 0, 254, 16),
    tile_info(32, 32, 0, 16, 254, 0, 286, 16),
    tile_info(32, 32, 0, 0, 286, 0, 318, 32),
    tile_info(32, 32, 0, 0, 318, 0, 350, 32),
    tile_info(32, 32, 0, 0, 350, 0, 382, 32),
    tile_info(32, 32, 0, 0, 382, 0, 414, 32),
    tile_info(32, 32, 0, 0, 414, 0, 446, 32),
    tile_info(32, 32, 21, 1, 446, 0, 457, 9),
    tile_info(32, 32, 24, 1, 446, 9, 454, 18),
    tile_info(32, 32, 24, 1, 446, 18, 454, 27),
    tile_info(32, 32, 1, 0, 457, 0, 466, 13),
    tile_info(32, 32, 1, 1, 457, 13, 463, 19),
    tile_info(32, 32, 0, 0, 457, 19, 465, 27),
    tile_info(32, 32, 26, 0, 466, 0, 472, 11),
    tile_info(32, 32, 25, 0, 466, 11, 473, 22),
    tile_info(32, 32, 24, 0, 473, 0, 481, 11),
    tile_info(32, 32, 20, 1, 473, 11, 485, 20),
    tile_info(32, 32, 18, 21, 473, 20, 487, 31),
    tile_info(32, 32, 24, 0, 487, 0, 495, 11),
    tile_info(32, 32, 25, 0, 487, 11, 494, 22),
    tile_info(32, 32, 25, 0, 495, 0, 502, 11),
    tile_info(32, 32, 25, 0, 495, 11, 502, 22),
    tile_info(32, 32, 25, 0, 502, 0, 509, 11),
    tile_info(32, 32, 25, 0, 502, 11, 509, 22),
    tile_info(32, 32, 21, 2, 502, 22, 513, 29),
    tile_info(32, 32, 28, 0, 513, 0, 517, 12),
    tile_info(32, 32, 24, 0, 513, 12, 521, 24),
    tile_info(32, 32, 19, 0, 521, 0, 534, 11),
    tile_info(32, 32, 24, 0, 521, 11, 529, 22),
    tile_info(32, 32, 25, 0, 521, 22, 528, 31),
    tile_info(32, 32, 23, 0, 534, 0, 543, 10),
    tile_info(32, 32, 25, 0, 534, 10, 541, 21),
    tile_info(32, 32, 0, 23, 534, 21, 550, 30),
    tile_info(8, 16, 0, 2, 550, 0, 557, 12),
    tile_info(32, 32, 23, 1, 550, 12, 559, 21),
    tile_info(32, 32, 0, 0, 559, 0, 591, 32),
    tile_info(32, 32, 0, 0, 591, 0, 623, 32),
    tile_info(32, 32, 0, 0, 623, 0, 655, 32),
    tile_info(32, 32, 0, 0, 655, 0, 687, 32),
    tile_info(32, 32, 0, 0, 687, 0, 719, 32),
    tile_info(8, 14, 0, 2, 719, 0, 727, 9),
    tile_info(6, 14, 0, 2, 719, 9, 725, 18),
    tile_info(8, 14, 0, 2, 719, 18, 727, 27),
    tile_info(8, 14, 0, 2, 727, 0, 735, 10),
    tile_info(8, 14, 0, 1, 727, 10, 735, 21),
    tile_info(8, 14, 0, 2, 727, 21, 735, 31),
    tile_info(8, 14, 0, 1, 735, 0, 743, 10),
    tile_info(8, 14, 0, 2, 735, 10, 743, 20),
    tile_info(8, 14, 0, 1, 735, 20, 743, 30),
    tile_info(8, 14, 0, 2, 743, 0, 751, 10),
    tile_info(32, 32, 15, 20, 743, 10, 757, 20),
    tile_info(32, 32, 15, 19, 743, 20, 757, 31),
    tile_info(32, 32, 16, 20, 757, 0, 770, 10),
    tile_info(32, 32, 16, 20, 757, 10, 770, 19),
    tile_info(32, 32, 17, 20, 757, 19, 769, 28),
    tile_info(32, 32, 21, 20, 770, 0, 778, 9),
    tile_info(32, 32, 18, 20, 770, 9, 781, 18),
    tile_info(32, 32, 17, 20, 770, 18, 782, 27),
    tile_info(32, 32, 17, 20, 782, 0, 794, 10),
    tile_info(32, 32, 16, 19, 782, 10, 795, 21),
    tile_info(32, 32, 16, 20, 782, 21, 795, 31),
    tile_info(32, 32, 1, 21, 795, 0, 806, 10),
    tile_info(32, 32, 1, 21, 795, 10, 806, 20),
    tile_info(32, 32, 1, 21, 795, 20, 806, 30),
    tile_info(32, 32, 1, 21, 806, 0, 817, 10),
    tile_info(32, 32, 1, 21, 806, 10, 817, 20),
    tile_info(32, 32, 0, 0, 817, 0, 849, 32),
    tile_info(32, 32, 0, 30, 849, 0, 881, 2),
    tile_info(32, 32, 0, 30, 849, 2, 881, 4),
    tile_info(32, 32, 0, 30, 849, 4, 881, 6),
    tile_info(32, 32, 0, 30, 849, 6, 881, 8),
    tile_info(32, 32, 0, 30, 849, 8, 881, 10),
    tile_info(32, 32, 12, 0, 849, 10, 857, 26),
    tile_info(32, 32, 16, 2, 881, 0, 897, 12),
    tile_info(32, 32, 16, 12, 881, 12, 897, 20),
    tile_info(32, 32, 18, 16, 897, 0, 909, 16),
    tile_info(32, 32, 12, 16, 909, 0, 917, 16),
    tile_info(32, 32, 0, 18, 909, 16, 925, 28),
    tile_info(32, 32, 0, 12, 925, 0, 941, 8),
    tile_info(32, 32, 2, 0, 925, 8, 937, 24),
    tile_info(32, 32, 12, 0, 941, 0, 949, 16),
    tile_info(32, 32, 16, 2, 941, 16, 957, 28),
    tile_info(32, 32, 16, 12, 957, 0, 973, 8),
    tile_info(32, 32, 18, 16, 957, 8, 969, 24),
    tile_info(32, 32, 12, 16, 973, 0, 981, 16),
    tile_info(32, 32, 0, 18, 973, 16, 989, 28),
    tile_info(32, 32, 0, 12, 989, 0, 1005, 8),
    tile_info(32, 32, 2, 0, 989, 8, 1001, 24),
};

tile_info &tile_icons_info(tileidx_t idx)
{
    ASSERT_RANGE(idx, 0, TILEI_ICONS_MAX);
    return _tile_icons_info[idx - 0];
}


typedef pair<const char*, tileidx_t> _name_pair;

static _name_pair icons_name_pairs[] =
{
    _name_pair("animated_weapon", 17 + 0),
    _name_pair("berserk", 24 + 0),
    _name_pair("blind", 31 + 0),
    _name_pair("constricted", 23 + 0),
    _name_pair("cursor", 9 + 0),
    _name_pair("cursor2", 10 + 0),
    _name_pair("cursor3", 11 + 0),
    _name_pair("deaths_door", 36 + 0),
    _name_pair("demon_num1", 68 + 0),
    _name_pair("demon_num2", 69 + 0),
    _name_pair("demon_num3", 70 + 0),
    _name_pair("demon_num4", 71 + 0),
    _name_pair("demon_num5", 72 + 0),
    _name_pair("drain", 38 + 0),
    _name_pair("fleeing", 32 + 0),
    _name_pair("glowing", 25 + 0),
    _name_pair("good_neutral", 15 + 0),
    _name_pair("hasted", 27 + 0),
    _name_pair("heart", 14 + 0),
    _name_pair("inner_flame", 22 + 0),
    _name_pair("item_slot_selected", 73 + 0),
    _name_pair("magic_map_mesh", 44 + 0),
    _name_pair("mask_deep_water", 2 + 0),
    _name_pair("mask_deep_water_murky", 4 + 0),
    _name_pair("mask_deep_water_shoals", 6 + 0),
    _name_pair("mask_lava", 8 + 0),
    _name_pair("mask_shallow_water", 3 + 0),
    _name_pair("mask_shallow_water_murky", 5 + 0),
    _name_pair("mask_shallow_water_shoals", 7 + 0),
    _name_pair("may_stab_brand", 33 + 0),
    _name_pair("mdam_almost_dead", 78 + 0),
    _name_pair("mdam_heavily_damaged", 76 + 0),
    _name_pair("mdam_lightly_damaged", 74 + 0),
    _name_pair("mdam_moderately_damaged", 75 + 0),
    _name_pair("mdam_severely_damaged", 77 + 0),
    _name_pair("mesh", 42 + 0),
    _name_pair("might", 28 + 0),
    _name_pair("neutral", 16 + 0),
    _name_pair("new_stair", 41 + 0),
    _name_pair("num0", 47 + 0),
    _name_pair("num1", 48 + 0),
    _name_pair("num2", 49 + 0),
    _name_pair("num3", 50 + 0),
    _name_pair("num4", 51 + 0),
    _name_pair("num5", 52 + 0),
    _name_pair("num6", 53 + 0),
    _name_pair("num7", 54 + 0),
    _name_pair("num8", 55 + 0),
    _name_pair("num9", 56 + 0),
    _name_pair("num_minus1", 61 + 0),
    _name_pair("num_minus2", 60 + 0),
    _name_pair("num_minus3", 59 + 0),
    _name_pair("num_minus4", 58 + 0),
    _name_pair("num_minus5", 57 + 0),
    _name_pair("num_plus1", 63 + 0),
    _name_pair("num_plus2", 64 + 0),
    _name_pair("num_plus3", 65 + 0),
    _name_pair("num_plus4", 66 + 0),
    _name_pair("num_plus5", 67 + 0),
    _name_pair("num_zero", 62 + 0),
    _name_pair("oor_mesh", 43 + 0),
    _name_pair("pain_mirror", 35 + 0),
    _name_pair("perm_summon", 19 + 0),
    _name_pair("petrified", 30 + 0),
    _name_pair("petrifying", 29 + 0),
    _name_pair("poison", 20 + 0),
    _name_pair("recall", 37 + 0),
    _name_pair("slowed", 26 + 0),
    _name_pair("something_under", 39 + 0),
    _name_pair("stab_brand", 34 + 0),
    _name_pair("sticky_flame", 21 + 0),
    _name_pair("summoned", 18 + 0),
    _name_pair("trap_net", 1 + 0),
    _name_pair("trap_web", 13 + 0),
    _name_pair("travel_exclusion_centre_fg", 46 + 0),
    _name_pair("travel_exclusion_fg", 45 + 0),
    _name_pair("travel_path_from", 79 + 0),
    _name_pair("travel_path_to", 87 + 0),
    _name_pair("tried", 40 + 0),
    _name_pair("tutorial_cursor", 12 + 0),
};

bool tile_icons_index(const char *str, tileidx_t *idx)
{
    ASSERT(str);
    if (!str)
        return false;

    string lc = str;
    for (unsigned int i = 0; i < lc.size(); i++)
        lc[i] = tolower(lc[i]);

    int num_pairs = sizeof(icons_name_pairs) / sizeof(icons_name_pairs[0]);
    bool result = binary_search<const char *, tileidx_t>(
       lc.c_str(), &icons_name_pairs[0], num_pairs, &strcmp, idx);
    return result;
}

bool tile_icons_equal(tileidx_t tile, tileidx_t idx)
{
    ASSERT_RANGE(tile, 0, TILEI_ICONS_MAX);
    return idx >= tile && idx < tile + tile_icons_count(tile);
}


typedef pair<tile_variation, tileidx_t> _colour_pair;

static _colour_pair icons_colour_pairs[] =
{
    _colour_pair(tile_variation(0, 0), 0),
};

tileidx_t tile_icons_coloured(tileidx_t idx, int col)
{
    int num_pairs = sizeof(icons_colour_pairs) / sizeof(icons_colour_pairs[0]);
    tile_variation key(idx, col);
    tileidx_t found;
    bool result = binary_search<tile_variation, tileidx_t>(
       key, &icons_colour_pairs[0], num_pairs,
       &tile_variation::cmp, &found);
    return (result ? found : idx);
}

